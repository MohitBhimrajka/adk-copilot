"use client"

import { useState } from "react"
import { Info, Layers, Send, CheckCircle, X } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import type { useChatStream } from "@/hooks/useChatStream"
import Tooltip from "./Tooltip"

interface ArchitectureApprovalCardProps {
  planText: string
  diagramUrl: string
  streamData: ReturnType<typeof useChatStream>
}

export default function ArchitectureApprovalCard({ planText, diagramUrl, streamData }: ArchitectureApprovalCardProps) {
  const { handleApproval } = streamData
  const [showRejectForm, setShowRejectForm] = useState(false)
  const [feedback, setFeedback] = useState("")

  const handleApprove = () => {
    handleApproval(true)
  }

  const handleReject = () => {
    if (showRejectForm) {
      handleApproval(false, feedback)
      setShowRejectForm(false)
      setFeedback("")
    } else {
      setShowRejectForm(true)
    }
  }

  return (
    <div className="bg-white rounded-lg p-6 google-shadow-lg" style={{ borderLeft: "4px solid var(--google-blue)" }}>
      <div className="flex items-center gap-2 mb-4">
        <Layers className="w-5 h-5" style={{ color: "var(--google-blue)" }} />
        <h3 className="text-lg font-medium" style={{ color: "var(--google-grey-800)" }}>
          Architecture Proposal
        </h3>
        <Tooltip content="This plan was generated by the code_generator_agent. Approving it will trigger the full code generation and review process.">
          <Info className="w-4 h-4 cursor-help ml-1" style={{ color: "var(--google-grey-500)" }} />
        </Tooltip>
      </div>

      <div className="mb-6">
        <div className="mb-4 p-4 rounded-lg" style={{ backgroundColor: "var(--google-grey-50)" }}>
          <p style={{ color: "var(--google-grey-700)" }}>{planText}</p>
        </div>

        {diagramUrl && (
          <div className="flex justify-center mb-4">
            <img
              src={diagramUrl || "/placeholder.svg"}
              alt="Architecture diagram"
              className="max-w-full h-auto rounded-lg google-shadow"
              style={{ border: "1px solid var(--google-grey-200)" }}
            />
          </div>
        )}
      </div>

      {showRejectForm ? (
        <div className="space-y-4">
          <Textarea
            placeholder="Please provide feedback on what should be changed..."
            value={feedback}
            onChange={(e) => setFeedback(e.target.value)}
            className="min-h-[100px] border-gray-300 focus:border-blue-500"
          />
          <div className="flex gap-3">
            <Button onClick={handleReject} className="text-white" style={{ backgroundColor: "var(--google-red)" }}>
              <Send className="w-4 h-4 mr-2" />
              Submit Changes
            </Button>
            <Button
              onClick={() => setShowRejectForm(false)}
              variant="outline"
              style={{ borderColor: "var(--google-grey-300)", color: "var(--google-grey-700)" }}
            >
              Cancel
            </Button>
          </div>
        </div>
      ) : (
        <div className="flex gap-3">
          <Button onClick={handleApprove} className="text-white" style={{ backgroundColor: "var(--google-green)" }}>
            <CheckCircle className="w-4 h-4 mr-2" />
            Approve Plan
          </Button>
          <Button
            onClick={handleReject}
            variant="outline"
            style={{ borderColor: "var(--google-red)", color: "var(--google-red)" }}
          >
            <X className="w-4 h-4 mr-2" />
            No, Stop
          </Button>
        </div>
      )}
    </div>
  )
}
